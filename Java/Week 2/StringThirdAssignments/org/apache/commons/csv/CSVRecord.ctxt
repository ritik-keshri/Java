#BlueJ class context
comment0.target=CSVRecord
comment0.text=\n\ A\ CSV\ record\ parsed\ from\ a\ CSV\ file.\n\n\ @version\ $Id\:\ CSVRecord.java\ 1727809\ 2016-01-31\ 13\:08\:33Z\ sebb\ $\n
comment1.params=values\ mapping\ comment\ recordNumber\ characterPosition
comment1.target=CSVRecord(java.lang.String[],\ java.util.Map,\ java.lang.String,\ long,\ long)
comment10.params=name
comment10.target=boolean\ isMapped(java.lang.String)
comment10.text=\n\ Checks\ whether\ a\ given\ column\ is\ mapped,\ i.e.\ its\ name\ has\ been\ defined\ to\ the\ parser.\n\n\ @param\ name\n\ \ \ \ \ \ \ \ \ \ \ \ the\ name\ of\ the\ column\ to\ be\ retrieved.\n\ @return\ whether\ a\ given\ column\ is\ mapped.\n
comment11.params=name
comment11.target=boolean\ isSet(java.lang.String)
comment11.text=\n\ Checks\ whether\ a\ given\ columns\ is\ mapped\ and\ has\ a\ value.\n\n\ @param\ name\n\ \ \ \ \ \ \ \ \ \ \ \ the\ name\ of\ the\ column\ to\ be\ retrieved.\n\ @return\ whether\ a\ given\ columns\ is\ mapped\ and\ has\ a\ value\n
comment12.params=
comment12.target=java.util.Iterator\ iterator()
comment12.text=\n\ Returns\ an\ iterator\ over\ the\ values\ of\ this\ record.\n\n\ @return\ an\ iterator\ over\ the\ values\ of\ this\ record.\n
comment13.params=map
comment13.target=java.util.Map\ putIn(java.util.Map)
comment13.text=\n\ Puts\ all\ values\ of\ this\ record\ into\ the\ given\ Map.\n\n\ @param\ map\n\ \ \ \ \ \ \ \ \ \ \ \ The\ Map\ to\ populate.\n\ @return\ the\ given\ map.\n
comment14.params=
comment14.target=int\ size()
comment14.text=\n\ Returns\ the\ number\ of\ values\ in\ this\ record.\n\n\ @return\ the\ number\ of\ values.\n
comment15.params=
comment15.target=java.util.List\ toList()
comment15.text=\n\ Converts\ the\ values\ to\ a\ List.\n\n\ TODO\:\ Maybe\ make\ this\ public?\n\n\ @return\ a\ new\ List\n
comment16.params=
comment16.target=java.util.Map\ toMap()
comment16.text=\n\ Copies\ this\ record\ into\ a\ new\ Map.\ The\ new\ map\ is\ not\ connect\n\n\ @return\ A\ new\ Map.\ The\ map\ is\ empty\ if\ the\ record\ has\ no\ headers.\n
comment17.params=
comment17.target=java.lang.String\ toString()
comment17.text=\n\ Returns\ a\ string\ representation\ of\ the\ contents\ of\ this\ record.\ The\ result\ is\ constructed\ by\ comment,\ mapping,\n\ recordNumber\ and\ by\ passing\ the\ internal\ values\ array\ to\ {@link\ Arrays\#toString(Object[])}.\n\n\ @return\ a\ String\ representation\ of\ this\ record.\n
comment18.params=
comment18.target=java.lang.String[]\ values()
comment2.params=e
comment2.target=java.lang.String\ get(java.lang.Enum)
comment2.text=\n\ Returns\ a\ value\ by\ {@link\ Enum}.\n\n\ @param\ e\n\ \ \ \ \ \ \ \ \ \ \ \ an\ enum\n\ @return\ the\ String\ at\ the\ given\ enum\ String\n
comment3.params=i
comment3.target=java.lang.String\ get(int)
comment3.text=\n\ Returns\ a\ value\ by\ index.\n\n\ @param\ i\n\ \ \ \ \ \ \ \ \ \ \ \ a\ column\ index\ (0-based)\n\ @return\ the\ String\ at\ the\ given\ index\n
comment4.params=name
comment4.target=java.lang.String\ get(java.lang.String)
comment4.text=\n\ Returns\ a\ value\ by\ name.\n\n\ @param\ name\n\ \ \ \ \ \ \ \ \ \ \ \ the\ name\ of\ the\ column\ to\ be\ retrieved.\n\ @return\ the\ column\ value,\ maybe\ null\ depending\ on\ {@link\ CSVFormat\#getNullString()}.\n\ @throws\ IllegalStateException\n\ \ \ \ \ \ \ \ \ \ \ \ \ if\ no\ header\ mapping\ was\ provided\n\ @throws\ IllegalArgumentException\n\ \ \ \ \ \ \ \ \ \ \ \ \ if\ {@code\ name}\ is\ not\ mapped\ or\ if\ the\ record\ is\ inconsistent\n\ @see\ \#isConsistent()\n\ @see\ CSVFormat\#withNullString(String)\n
comment5.params=
comment5.target=long\ getCharacterPosition()
comment5.text=\n\ Returns\ the\ start\ position\ of\ this\ record\ as\ a\ character\ position\ in\ the\ source\ stream.\ This\ may\ or\ may\ not\n\ correspond\ to\ the\ byte\ position\ depending\ on\ the\ character\ set.\n\n\ @return\ the\ position\ of\ this\ record\ in\ the\ source\ stream.\n
comment6.params=
comment6.target=java.lang.String\ getComment()
comment6.text=\n\ Returns\ the\ comment\ for\ this\ record,\ if\ any.\n\ Note\ that\ comments\ are\ attached\ to\ the\ following\ record.\n\ If\ there\ is\ no\ following\ record\ (i.e.\ the\ comment\ is\ at\ EOF)\n\ the\ comment\ will\ be\ ignored.\n\n\ @return\ the\ comment\ for\ this\ record,\ or\ null\ if\ no\ comment\ for\ this\ record\ is\ available.\n
comment7.params=
comment7.target=long\ getRecordNumber()
comment7.text=\n\ Returns\ the\ number\ of\ this\ record\ in\ the\ parsed\ CSV\ file.\n\n\ <p>\n\ <strong>ATTENTION\:</strong>\ If\ your\ CSV\ input\ has\ multi-line\ values,\ the\ returned\ number\ does\ not\ correspond\ to\n\ the\ current\ line\ number\ of\ the\ parser\ that\ created\ this\ record.\n\ </p>\n\n\ @return\ the\ number\ of\ this\ record.\n\ @see\ CSVParser\#getCurrentLineNumber()\n
comment8.params=
comment8.target=boolean\ isConsistent()
comment8.text=\n\ Tells\ whether\ the\ record\ size\ matches\ the\ header\ size.\n\n\ <p>\n\ Returns\ true\ if\ the\ sizes\ for\ this\ record\ match\ and\ false\ if\ not.\ Some\ programs\ can\ export\ files\ that\ fail\ this\n\ test\ but\ still\ produce\ parsable\ files.\n\ </p>\n\n\ @return\ true\ of\ this\ record\ is\ valid,\ false\ if\ not\n
comment9.params=
comment9.target=boolean\ hasComment()
comment9.text=\n\ Checks\ whether\ this\ record\ has\ a\ comment,\ false\ otherwise.\n\ Note\ that\ comments\ are\ attached\ to\ the\ following\ record.\n\ If\ there\ is\ no\ following\ record\ (i.e.\ the\ comment\ is\ at\ EOF)\n\ the\ comment\ will\ be\ ignored.\n\n\ @return\ true\ if\ this\ record\ has\ a\ comment,\ false\ otherwise\n\ @since\ 1.3\n
numComments=19
